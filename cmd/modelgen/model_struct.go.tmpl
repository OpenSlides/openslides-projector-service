type {{.GoName}} struct { {{range .Fields}}
	{{.GoName}} {{.ValueType}} `json:"{{.FieldName}}"`{{end}}
	{{if .HasRelations}}loadedRelations map[string]struct{}{{range .Relations}}
	{{.PropNameLc}} {{if .List}}[]{{end}}{{if not .Generic}}*{{end}}{{.CollectionName}}{{end}}{{end}}
}

func (m *{{.GoName}}) CollectionName() string {
	return "{{.CollectionName}}"
}

{{range .Relations}}func (m *{{.GoName}}) {{.PropName}}() {{if .List}}[]*{{else}}{{if not .Generic}}{{if not .Required}}*{{end}}{{end}}{{end}}{{.CollectionName}} {
	if _, ok := m.loadedRelations["{{.IdField}}"]; !ok {
		log.Panic().Msg("Tried to access {{.PropName}} relation of {{.GoName}} which was not loaded.")
	}

	return {{if not .List}}{{if not .Generic}}{{if .Required}}*{{end}}{{end}}{{end}}m.{{.PropNameLc}}
}

{{end}}
func (m *{{.GoName}}) GetRelated(field string, id int) *RelatedModelsAccessor { {{if .HasRelations}}
	switch field { {{range .Relations}}
	case "{{.IdField}}":{{if .List}}
		for _, r := range m.{{.PropNameLc}} {
			if r.ID == id {
				return r.GetRelatedModelsAccessor()
			}
		}{{else}}
	  return m.{{.PropNameLc}}.GetRelatedModelsAccessor(){{end}}{{end}}
	}
	{{end}}
	return nil}

func (m *{{.GoName}}) SetRelated(field string, content interface{}) { {{if .HasRelations}}
	if content != nil {
		switch field { {{range .Relations}}
		case "{{.IdField}}":{{if .Generic}}
			panic("not implemented"){{else}}
	  	m.{{.PropNameLc}} = content.({{if .List}}[]{{end}}*{{.CollectionName}}){{end}}{{end}}
		default:
			return
		}
	}

	if m.loadedRelations == nil {
		m.loadedRelations = map[string]struct{}{}
	}
	m.loadedRelations[field] = struct{}{}
{{end}}}

func (m *{{.GoName}}) SetRelatedJSON(field string, content []byte) (*RelatedModelsAccessor, error) { {{if .HasRelations}}
	var result *RelatedModelsAccessor
	switch field { {{range $i, $r := .Relations}}
	case "{{.IdField}}":{{if .Generic}}{{if not .Required}}
		if m.{{.IdFieldGo}} == nil {
			return nil, fmt.Errorf("cannot fill relation for {{.IdFieldGo}} while id field is empty")
		}{{end}}
		parts := strings.Split({{if not .Required}}*{{end}}m.{{.IdFieldGo}}, "/")
		if len(parts) != 2 {
			return nil, fmt.Errorf("could not parse id field")
		}

		switch parts[0] { {{range $key, $value := .ToCollections}}
		case "{{$key}}":
			var entry {{$value}}
			err := json.Unmarshal(content, &entry)
			if err != nil {
				return nil, err
			}
			m.{{$r.PropNameLc}} = &entry
			result = entry.GetRelatedModelsAccessor()
		{{end}} }
		{{else}}
		var entry {{.CollectionName}}
		err := json.Unmarshal(content, &entry)
		if err != nil {
			return nil, err
		}
		{{if .List}}
		m.{{.PropNameLc}} = append(m.{{.PropNameLc}}, &entry)
		{{else}}
		m.{{.PropNameLc}} = &entry
		{{end}}
		result = entry.GetRelatedModelsAccessor() {{end}}{{end}}
	default:
		return nil, fmt.Errorf("set related field json on not existing field")
	}

	if m.loadedRelations == nil {
		m.loadedRelations = map[string]struct{}{}
	}
	m.loadedRelations[field] = struct{}{}
	return result, nil{{else}}
	return nil, nil{{end}}
}

func (m *{{.GoName}}) Get(field string) interface{} {
	switch field { {{range .Fields}}
	case "{{.FieldName}}":
	  return m.{{.GoName}}{{end}}
	}

	return nil
}

func (m *{{.GoName}}) GetFqids(field string) []string { {{if .HasRelations}}
	switch field { {{range .Relations}}
	case "{{.IdField}}":{{if .List}}
		r := make([]string, len(m.{{.IdFieldGo}}))
		for i, id := range m.{{.IdFieldGo}} {
			r[i] = "{{.RelCollection}}/" + strconv.Itoa(id)
		}
		return r
		{{else if .Required}}{{if .Generic}}
		return []string{m.{{.IdFieldGo}}}{{else}}
		return []string{"{{.RelCollection}}/" + strconv.Itoa(m.{{.IdFieldGo}})}{{end}}
		{{else}}
		if m.{{.IdFieldGo}} != nil { {{if .Generic}}
			return []string{*m.{{.IdFieldGo}}}{{else}}
			return []string{"{{.RelCollection}}/" + strconv.Itoa(*m.{{.IdFieldGo}})}{{end}}
		}
	{{end}}{{end}} } {{end}}
	return []string{}
}

func (m *{{.GoName}}) Update(data map[string]string) error { {{range .Fields}}
	if val, ok := data["{{.FieldName}}"]; ok {
		err := json.Unmarshal([]byte(val), &m.{{.GoName}})
		if err != nil {
			return err
		}
		{{if .Relation}}{{if .Relation.List}}
		if _, ok := m.loadedRelations["{{ .Relation.IdField }}"]; ok {
			m.{{ .Relation.PropNameLc }} = slices.DeleteFunc(m.{{ .Relation.PropNameLc }}, func (r *{{ .Relation.CollectionName }}) bool {
				return !slices.Contains(m.{{ .Relation.IdFieldGo }}, r.ID)
			})
		}
	{{end}}{{end}} }
	{{end}}

	return nil
}

func (m *{{.GoName}}) GetRelatedModelsAccessor() *RelatedModelsAccessor {
	return &RelatedModelsAccessor{
		m.GetFqids,
		m.GetRelated,
		m.SetRelated,
		m.SetRelatedJSON,
		m.Update,
	}
}

